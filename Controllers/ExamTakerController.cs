using CemexExamApp.DBCore;
using CemexExamApp.Models;
using CemexExamApp.ViewModel;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.DataProtection;
using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc;

namespace CemexExamApp.Controllers
{
    public class ExamTakerController : Controller
    {
        private const string Purpose = "Exam Taker URL Protection";
        private readonly IDataProtectionProvider provider;

        public ExamTakerController(IDataProtectionProvider provider)
        {
            this.provider = provider;
        }

        private string Encrypt(string plainText)
        {
            var protector = provider.CreateProtector(Purpose);
            return protector.Protect(plainText);
        }

        private string Decrypt(string cipherText)
        {
            var protector = provider.CreateProtector(Purpose);
            return protector.Unprotect(cipherText);
        }
        public void SendMailExamURL()
        {
            AdminAssessment adminAssessment = new AdminAssessment();
            string RootURL = $"{this.Request.Scheme}://{this.Request.Host}{this.Request.PathBase}";
            List<Exam> exams =  adminAssessment.GetTodayExamTakerslist();
            if(exams.Count > 0)
            foreach(Exam exam in exams)
            {
                foreach(ExamTaker examTaker in exam.ExamTakers)
                {
                        string valueToEnc = exam.ID.ToString();
                       string EncryptedExamId = Encrypt(valueToEnc);

                        string Body = @" <pre style='font-family:Calibri; font-size:medium'><b>Dear Cemex employee ,</b><br/>
         Please find below Assessment Link .. You can go directly from here: </pre><br/>
                ";
             Body += "<pre>                                       <div class=\"text-center\">  <a href=\"" + RootURL+ "/ExamTaker/ConfirmEmail?Id="+ EncryptedExamId + "\""; ;
            
                        Body += " class=\"btn btn-success text-center\" target=\"_blank\" ";
            Body += " asp-route-ExamId=" + exam.ID.ToString()+"";
             Body += " asp-action=\"ConfirmEmail\"";
            Body += " asp-controller=\"ExamTaker\"";
             Body += " >Go To My Assessment</a> </div></pre> <br/>";
             Body += " <br/><pre style='font-family:Calibri;font-size:medium'> <b>Best Regards,</b><br/>";
             Body += "Health & safety team <br/>";
             Body += "This is an automatic Email generated by Health & safety Team ,Please do not reply to this Email </pre>";

                    AdminHelper.SendMail(null, examTaker.EMail, null, "CEMEX Assessment", Body, null);

                }
            }
           
        }

        [HttpGet]
        [AllowAnonymous]
        public IActionResult ConfirmEmail(string Id)
        {
            if (string.IsNullOrEmpty(Id))
            {
                return BadRequest();
            }
            long ExamId = long.Parse(Decrypt(Id));
            StartAssessmentViewModel startAssessmentViewModel = new StartAssessmentViewModel();
            startAssessmentViewModel.ExamId = ExamId;
            return View(startAssessmentViewModel);
        }

        [HttpPost]
        public IActionResult ConfirmEmail( StartAssessmentViewModel startAssessmentViewModel)
        {
           
          
            AdminAssessment adminAssessment = new AdminAssessment();

            if(!adminAssessment.CheckTakerExamValDate(startAssessmentViewModel.ExamId))
            {
                ModelState.AddModelError("", "Exam's link is not valid anymore");
            }

            if(!adminAssessment.CheckTakerEmail(startAssessmentViewModel.Email, startAssessmentViewModel.ExamId))
            {
                ModelState.AddModelError("", "Inserted email is not valid");
            }
            
            if (adminAssessment.IsOpendBefore(startAssessmentViewModel.Email, startAssessmentViewModel.ExamId))
            {
                ModelState.AddModelError("", "You already passed this assessment before.");
            }

            if (ModelState.IsValid)
            {
                string ExamIDToEnc = startAssessmentViewModel.ExamId.ToString();
                string EncryptedExamId = Encrypt(ExamIDToEnc);

                string MailToEnc = startAssessmentViewModel.Email.ToString();
                string EncryptedEmail = Encrypt(MailToEnc);
                TempData["Email"] = startAssessmentViewModel.Email.ToString(); 
                TempData["ExamId"] = startAssessmentViewModel.ExamId.ToString(); 
                return RedirectToAction("Tips");
            }
            else
            {
                return View();
            }
            
        }


        public IActionResult Tips()
        {
            var Emaaail = TempData["Email"] as string;
            var ExamIddd = TempData["ExamId"] as string;
            if (string.IsNullOrEmpty(Emaaail) || string.IsNullOrEmpty(ExamIddd))
            {
                return BadRequest();
            }
            AdminExam adminExam = new AdminExam();
            Exam exam = adminExam.GetExamById(long.Parse(ExamIddd));
            ExamTaker examt = adminExam.GetTakersByExamId(long.Parse(ExamIddd)).FirstOrDefault(x=>x.EMail.ToLower() == Emaaail.ToLower());
            StartAssessmentViewModel startAssessmentViewModel = new StartAssessmentViewModel();
            startAssessmentViewModel.ExamId = exam.ID;
            startAssessmentViewModel.Duration = exam.Duration.Duration1.ToString();
            startAssessmentViewModel.ValidityDateTo = exam.ValidityDateTo;
            startAssessmentViewModel.QuestionsCount = exam.QuestionsCount.ToString();
            startAssessmentViewModel.TakerName = examt.Username;
            startAssessmentViewModel.ExamTakerId = examt.ID;
            TempData["ExamTakerId"] = startAssessmentViewModel.ExamTakerId.ToString();
            return View(startAssessmentViewModel);
        }

        [HttpPost]
        public IActionResult Tips(StartAssessmentViewModel startAssessmentViewModel)
        {
          
            return RedirectToAction("Assessment");
            
        }

        public IActionResult Assessment()
        {
            try
            {
                var ExamTakerIddd = TempData["ExamTakerId"] as string;
                if (string.IsNullOrEmpty(ExamTakerIddd) )
                {
                    return BadRequest();
                }
                AdminAssessment adminAssessment = new AdminAssessment();
                AdminExam adminExam = new AdminExam();

                AssessmentViewModel AssessmentViewModel = new AssessmentViewModel();
                List<QuestionwithAns> questionwithAns = new List<QuestionwithAns>();

                ExamTaker examTaker = adminAssessment.GetExamTakeByID(long.Parse(ExamTakerIddd));

                examTaker.OpenedBefore = true;

                adminAssessment.SaveChange();

                AssessmentViewModel.ExamTakerId = long.Parse(ExamTakerIddd);
                AssessmentViewModel.exam = adminExam.GetExamById(examTaker.ExamID);


                foreach (ExamQuestion item in AssessmentViewModel.exam.ExamQuestions)
                {
                    questionwithAns.Add(new QuestionwithAns()
                    {
                        question = item.Question,
                        QquAnswers = item.Question.QuestionAnswers.First()
                    });
                }

                AssessmentViewModel.QuestionwithAns = questionwithAns;

                return View(AssessmentViewModel);
            }
            catch (Exception ex)
            {
              //  ModelState.AddModelError("", "Exception : " + ex.Message);
                return RedirectToAction("Error","Home");
            }

        }

        [HttpPost]
        public IActionResult Assessment(AssessmentViewModel AssessmentViewModel)
        {
            AdminAssessment adminAssessment = new AdminAssessment();
            AdminExam adminExam = new AdminExam();
            ExamTaker examTaker = adminAssessment.GetExamTakeByID(AssessmentViewModel.ExamTakerId);
            // to set final result to examTaker
            AssessmentViewModel.exam = adminExam.GetExamById(examTaker.ExamID);
           List<Question> questions = adminExam.GetQuestionsByExamId(examTaker.ExamID);

            List<ExamTakerAnswer> ExamTakerAnswers = new List<ExamTakerAnswer>();

            float CorrectAnsNo = 0;
            float totalNoOfQuestion = questions.Count();

                foreach (TakerAnswer item in AssessmentViewModel.takerAnswer)
                {
                  for (int i = 0; i < questions.Count; i++)
                  {
                    if (questions[i].ID == item.questionId && item.CorrectAnswerNo ==0)
                    {
                        ExamTakerAnswer examTakerAnswer = new ExamTakerAnswer();
                        examTakerAnswer.QuestionID = item.questionId;
                        examTakerAnswer.AnsNo = item.AnswerNo;
                        examTakerAnswer.ExamTakerID = AssessmentViewModel.ExamTakerId;

                        if ( item.AnswerNo == questions[i].CorrectAnswerID)
                        {
                            CorrectAnsNo++;
                            item.IsCorrect = true;
                            item.CorrectAnswerNo = questions[i].CorrectAnswerID;
                            examTakerAnswer.IsCorrect = true;
                        }
                        else
                        {
                            item.IsCorrect = false;
                            item.CorrectAnswerNo = questions[i].CorrectAnswerID;
                            examTakerAnswer.IsCorrect = false;
                        }
                        ExamTakerAnswers.Add(examTakerAnswer);

                    }


                  }
 
                }

            float result = (CorrectAnsNo / totalNoOfQuestion) * 100;
            if (result >= float.Parse(AssessmentViewModel.exam.Benchmark.Name.Replace("%", string.Empty)))
            {
                examTaker.FinalResult = true;
            }
            else
            {
                examTaker.FinalResult = false;
            }


            adminAssessment.SubmitAssessment( ExamTakerAnswers);
            TempData["Result"] = examTaker.FinalResult.ToString();
            return  RedirectToAction("FinishAssessment");
            
            
        }

        public IActionResult FinishAssessment()
        {
            return View();

        }

    }
}
